The alarm clock requires a firmware built from the latest master branch from:

  https://github.com/nodemcu/nodemcu-firmware.git

(found to work at commit 310faf7f).

It requires LFS (LUA_FLASH_STORE=0x20000) to save memory, and these 12 modules
enabled :

   file gpio i2c net node pwm rtctime sntp tmr u8g2 uart wifi

The I2C_MASTER_OLD_VERSION option must be disabled as the new i2c is
way faster and allows for faster screen refresh which adjusting settings.

The following font settings are required for the u8g2 module :
   - use font_5x7_tr (small)
   - remove font_6x10_tf and unifont_t

And one (or a few) I2C OLED drivers like ssd1306_i2c_128x64_noname or
ssd1306_i2c_128x32_univision.

Creating the firmware image:
  make -j$(nproc)
  dd if=bin/0x00000.bin bs=64k count=1 of=0x00000-padded.bin conv=sync
  cat 0x00000-padded.bin bin/0x10000.bin  > fw.bin

Alternately, this image could be configured and built from this site:

  https://nodemcu-build.com/

Flashing for ESP-12E:

  python tools/esptool.py --port /dev/ttyUSB0 erase_flash
  python tools/esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -ff 40m -fs 32m -fm dio  0x000000 fw.bin

Flashing for ESP8285:

  python tools/esptool.py --port /dev/ttyUSB0 erase_flash
  python tools/esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -ff 80m -fs  8m -fm dout 0x000000 fw.bin


Upon next boot, be sure not to assert DTR (or unplug it). The terminal must be
configured to 115200 bauds. It remains silent for about one minute, the time
needed to format the file system. Then the lua interpreter boots and says it
cannot open init.lua.

Then it's required to flash the core files. Here, "core" is a symlink to the
location where the iot-core package was extracted. With LFS, all files are
uploaded as a single "lfs.img" file which is automatically reflashed in-situ.
We still need to upload "init.lua" (which may be compiled as long as it's still
called init.lua), and a few config files that should remain editable:

  $ cd lfs
  $ ../../iot-core/tools/luac.cross -f -o ../lfs.img  *.lua
  $ zcat ../lfs.img | wc -c

The last command reports the memory usage and ensures the compilation worked
fine. A typical output size is around 45 kB for around 22 kB of image.

It is then possible to flash all files using luatool.py. This one defaults to a
USB tty but it can be changed and even works over TCP. Some delay is required
to avoid losing characters depending on the speed. 0.02 is OK at 115200 and
over telnet, but 74880 requires 0.03. When the ESP8285 goes crazy, it might
require to be reflashed using 74880 bauds (115200*26/40) likely indicating a
problem with the internal quartz frequency.

  #PORT="-p /dev/ttyUSB0 -b 74880 --delay 0.03"
  #PORT="--ip 192.168.10.10:23 --delay 0.02"
  PORT="-p /dev/ttyUSB0 -b 115200 --delay 0.02"

For programming, "tools" is a symlink to the luatool repository
(https://github.com/4refr0nt/luatool) :

  python tools/luatool.py $PORT -c -f ../iot-core/boot/init.lua -t init.lua

  # connect to the device and rename init.lc to init.lua:
  > file.rename("init.lc", "init.lua")

And more importantly, upload the compiled LFS archive:
  nodemcu-uploader --baud 460800 --port /dev/ttyUSB1 upload lfs.img

The network and system configuration needs to be uploaded. For this, it is
required to copy one of the "*.lua.sample" files from the conf directory to
the same without ".sample" and edit it to set the timezone and the network
configuration. It may be better *not* to compile them and let them editable
in field :

  python tools/luatool.py $PORT    -f conf/netconf.lua -t netconf.lua
  python tools/luatool.py $PORT    -f conf/sysconf.lua -t sysconf.lua

From this point the device is accessible over telnet if it is rebooted. It's
even possible to continue the flashing process by changing the PORT setting to
use the IP address.

It is important to note the chipid and the telnet password by issuing this
after rebooting from the serial console, and keeping a copy of its output :

  s=     "   node.chipid()     = " .. node.chipid() .. string.format(" (%x)",node.chipid())
  s=s.."\n   node.flashid()    = " .. node.flashid() .. "\n   node.flashsize()  = " .. node.flashsize()
  s=s.."\n   wifi.sta.getmac() = " .. wifi.sta.getmac() .. "\n   wifi.ap.getmac()  = " .. wifi.ap.getmac()
  s=s.."\n   wifi.sta.getip()  = " .. wifi.sta.getip() .. "\n   passwd            = " .. telnet_passwd
  print(s)
