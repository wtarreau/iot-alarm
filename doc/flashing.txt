The alarm clock requires a firmware built from the master image from
https://nodemcu-build.com/ (version 2.1) using integers only (no float)
with these 12 modules enabled :

   file gpio i2c net node pwm rtctime sntp tmr u8g uart wifi

And the following font settings for the u8g module :

   - use font 04b_03r (729 bytes) instead of 04b_03 (859)
   - remove font 6x10 (~600B) and chikita (2.2kB)

Other configurations use too much memory.

For ESP-12E:

  python tools/esptool.py --port /dev/ttyUSB0 erase_flash
  python tools/esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -ff 40m -fs 32m -fm dio  0x000000 nodemcu-master-12-modules-2017-09-23-21-24-50-integer.bin 0x3fc000 esp_init_data_default.bin

For ESP8285:

  python tools/esptool.py --port /dev/ttyUSB0 erase_flash
  python tools/esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -ff 80m -fs  8m -fm dout 0x000000 nodemcu-master-12-modules-2017-09-23-21-24-50-integer.bin 0x0fc000 esp_init_data_default.bin


Note that verify always says that the first image doesn't verify, this is
because bytes 2 and 3 are affected by -fs, -fm and -ff.

Upon next boot, be sure not to assert DTR (or unplug it). The terminal must be
configured to 115200 bauds. It remains silent for about one minute, the time
needed to format the file system. Then the lua interpreter boots and says it
cannot open init.lua.

It is then possible to flash all files using luatool.py. This one defaults to a
USB tty but it can be changed and even works over TCP. Some delay is required
to avoid losing characters depending on the speed. 0.02 is OK at 115200 and
over telnet, but 74880 requires 0.03. When the ESP8285 goes crazy, it might
require to be reflashed using 74880 bauds.

  #PORT="-p /dev/ttyUSB0 -b 74880 --delay 0.03"
  #PORT="--ip 192.168.10.10:23 --delay 0.02"
  PORT="-p /dev/ttyUSB0 -b 115200 --delay 0.02"

Then it's required to flash the core files. Here, "core" is a symlink to the
location where the iot-core package was extracted, and "tools" is a symlink to
the luatool repository (https://github.com/4refr0nt/luatool) :

  python tools/luatool.py $PORT    -f core/boot/init.lua
  python tools/luatool.py $PORT -c -f core/boot/nodemcu.lua
  python tools/luatool.py $PORT -c -f core/boot/socket.lua
  python tools/luatool.py $PORT -c -f core/boot/netsetup.lua

  python tools/luatool.py $PORT -c -f core/firmware/firmware-1.5.4.1.lua -t firmware.lua

  python tools/luatool.py $PORT -c -f core/lib/show.lua      -t lib/01-show.lua
  python tools/luatool.py $PORT -c -f core/lib/cat.lua       -t lib/02-cat.lua
  python tools/luatool.py $PORT -c -f core/lib/time.lua      -t lib/03-time.lua
  python tools/luatool.py $PORT -c -f core/lib/debounce.lua  -t lib/04-debounce.lua

  python tools/luatool.py $PORT -c -f core/svc/recovery.lua  -t svc/02-recovery.lua
  python tools/luatool.py $PORT -c -f core/svc/led.lua       -t svc/04-led.lua
  python tools/luatool.py $PORT -c -f core/svc/i2c.lua       -t svc/10-i2c.lua
  python tools/luatool.py $PORT -c -f core/svc/oled.lua      -t svc/15-oled.lua
  python tools/luatool.py $PORT -c -f core/svc/telnet.lua    -t svc/20-telnet.lua
  python tools/luatool.py $PORT -c -f core/svc/sntp_sync.lua -t svc/30-sntp.lua

The board configuration is required to assign pins :

  python tools/luatool.py $PORT -c -f code/board.lua -t board.lua

The network and system configuration needs to be uploaded. For this, it is
required to copy one of the "*.lua.sample" files from the conf directory to
the same without ".sample" and edit it to set the timezone and the network
configuration :

  python tools/luatool.py $PORT -c -f conf/netconf.lua -t netconf.lua
  python tools/luatool.py $PORT -c -f conf/sysconf.lua -t sysconf.lua

From this point the device is accessible over telnet if it is rebooted. It's
even possible to continue the flashing process by changing the PORT setting to
use the IP address.

The application code is a bit large, the Lua interpreter will not be able to
compile and execute it at once. The code had to be split into multiple files
so that they can be compiled separately. The main entry point needs to be
called "appli.lua" :

  python tools/luatool.py $PORT -c -f code/alarm-vars.lua
  python tools/luatool.py $PORT -c -f code/alarm-buttons.lua
  python tools/luatool.py $PORT -c -f code/alarm-light.lua
  python tools/luatool.py $PORT -c -f code/alarm-screen0.lua
  python tools/luatool.py $PORT -c -f code/alarm-screen1.lua
  python tools/luatool.py $PORT -c -f code/alarm-screen2.lua
  python tools/luatool.py $PORT -c -f code/alarm.lua -t appli.lua

Luatool also knows how to do this and will automatically remove the target file
once done when called with "-c". This saves quite some ram because the compiler
is not invoked during boot (and it probably leaks a bit). Warning, there's no
error output when compiling. Warning, do not do this with init.lua or dofile()
will not work anymore!

It is important to note the chipid and the telnet password by issuing this
after rebooting from the serial console, and keeping a copy of its output :

  s=     "   node.chipid()     = " .. node.chipid() .. string.format(" (%x)",node.chipid())
  s=s.."\n   node.flashid()    = " .. node.flashid() .. "\n   node.flashsize()  = " .. node.flashsize()
  s=s.."\n   wifi.sta.getmac() = " .. wifi.sta.getmac() .. "\n   wifi.ap.getmac()  = " .. wifi.ap.getmac()
  s=s.."\n   wifi.sta.getip()  = " .. wifi.sta.getip() .. "\n   passwd            = " .. telnet_passwd
  print(s)
